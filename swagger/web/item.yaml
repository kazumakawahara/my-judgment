openapi: 3.0.0

servers:
  - url: http://localhost:8080
    description: localhost

info:
  title: アイテム
  version: 1.0.0

paths:
  /categories/{categoryID}items:
    post:
      summary: アイテム新規登録
      tags: [ Items ]
      security:
        - bearerByJWT: [ ]
      parameters:
        - $ref: '#/components/parameters/paramApiVersion'
        - $ref: '#/components/parameters/paramMjCategoryID'
      requestBody:
        $ref: "#/components/requestBodies/postMjItemReq"
      responses:
        200:
          $ref: "#/components/responses/postMjItemResp"
        400:
          $ref: "#/components/responses/400BadRequest2"
        401:
          $ref: "#/components/responses/401Unauthorized"
        404:
          $ref: "#/components/responses/404NotFound2"
        409:
          $ref: "#/components/responses/409Conflict"
        410:
          $ref: "#/components/responses/410Gone"
        500:
          $ref: "#/components/responses/500InternalServerError"

    get:
      summary: アイテム一覧取得・検索
      tags: [ Items ]
      security:
        - bearerByJWT: [ ]
      parameters:
        - $ref: '#/components/parameters/paramApiVersion'
        - $ref: '#/components/parameters/paramMjCategoryID'
        - $ref: '#/components/parameters/paramLimit'
        - $ref: '#/components/parameters/paramOffset'
        - $ref: '#/components/parameters/paramName'
        - $ref: '#/components/parameters/paramArea'
        - $ref: '#/components/parameters/paramFeel'
        - $ref: '#/components/parameters/paramNumberOfPeople'
        - $ref: '#/components/parameters/paramGenderOfPair'
      responses:
        200:
          $ref: "#/components/responses/getMjItemsResp"
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401Unauthorized"
        404:
          $ref: "#/components/responses/404NotFound2"
        410:
          $ref: "#/components/responses/410Gone"
        500:
          $ref: "#/components/responses/500InternalServerError"

  /categories/{categoryID}items{itemID}:
    put:
      summary: アイテム更新
      tags: [ Items ]
      security:
        - bearerByJWT: [ ]
      parameters:
        - $ref: '#/components/parameters/paramApiVersion'
        - $ref: '#/components/parameters/paramMjCategoryID'
        - $ref: '#/components/parameters/paramMjItemID'
        - $ref: '#/components/parameters/paramMjLockID'
      requestBody:
        $ref: "#/components/requestBodies/putMjItemReq"
      responses:
        200:
          $ref: "#/components/responses/putMjItemResp"
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401Unauthorized"
        404:
          $ref: "#/components/responses/404NotFound3"
        409:
          $ref: "#/components/responses/409Conflict"
        410:
          $ref: "#/components/responses/410Gone"
        500:
          $ref: "#/components/responses/500InternalServerError"

    get:
      summary: アイテム単体取得
      tags: [ Items ]
      security:
        - bearerByJWT: [ ]
      parameters:
        - $ref: '#/components/parameters/paramApiVersion'
        - $ref: '#/components/parameters/paramMjCategoryID'
        - $ref: '#/components/parameters/paramMjItemID'
      responses:
        200:
          $ref: "#/components/responses/getMjItemResp"
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401Unauthorized"
        404:
          $ref: "#/components/responses/404NotFound4"
        410:
          $ref: "#/components/responses/410Gone"
        500:
          $ref: "#/components/responses/500InternalServerError"

    delete:
      summary: アイテム一括削除
      tags: [ Items ]
      security:
        - bearerByJWT: [ ]
      parameters:
        - $ref: '#/components/parameters/paramApiVersion'
        - $ref: '#/components/parameters/paramMjCategoryID'
        - $ref: '#/components/parameters/paramMjItemIDs'
      responses:
        204:
          description: NoContent
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401Unauthorized"
        404:
          $ref: "#/components/responses/404NotFound2"
        410:
          $ref: "#/components/responses/410Gone"
        500:
          $ref: "#/components/responses/500InternalServerError"

  /categories/{categoryID}items{itemID}do:
    put:
      summary: アイテム決定
      tags: [ Items ]
      security:
        - bearerByJWT: [ ]
      parameters:
        - $ref: '#/components/parameters/paramApiVersion'
        - $ref: '#/components/parameters/paramMjCategoryID'
        - $ref: '#/components/parameters/paramMjItemID'
      responses:
        204:
          description: NoContent
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401Unauthorized"
        404:
          $ref: "#/components/responses/404NotFound4"
        410:
          $ref: "#/components/responses/410Gone"
        500:
          $ref: "#/components/responses/500InternalServerError"

  /items/random:
    get:
      summary: アイテムランダム単体取得
      tags: [ Items ]
      security:
        - bearerByJWT: [ ]
      parameters:
        - $ref: '#/components/parameters/paramApiVersion'
        - $ref: '#/components/parameters/paramName'
        - $ref: '#/components/parameters/paramArea'
        - $ref: '#/components/parameters/paramFeel'
        - $ref: '#/components/parameters/paramNumberOfPeople'
        - $ref: '#/components/parameters/paramGenderOfPair'
      responses:
        200:
          $ref: "#/components/responses/getMjItemResp"
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401Unauthorized"
        404:
          $ref: "#/components/responses/404NotFound"
        410:
          $ref: "#/components/responses/410Gone"
        500:
          $ref: "#/components/responses/500InternalServerError"

  /favorite-items:
    get:
      summary: よく使うアイテム一覧取得
      tags: [ FavoriteItems ]
      security:
        - bearerByJWT: [ ]
      parameters:
        - $ref: '#/components/parameters/paramApiVersion'
      responses:
        200:
          $ref: "#/components/responses/getMjFavoriteItemsResp"
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401Unauthorized"
        410:
          $ref: "#/components/responses/410Gone"
        500:
          $ref: "#/components/responses/500InternalServerError"

  /favorite-items{itemID}:
    delete:
      summary: よく使うアイテム一削除
      tags: [ FavoriteItems ]
      security:
        - bearerByJWT: [ ]
      parameters:
        - $ref: '#/components/parameters/paramApiVersion'
        - $ref: '#/components/parameters/paramMjItemID'
      responses:
        204:
          description: NoContent
        400:
          $ref: "#/components/responses/400BadRequest"
        401:
          $ref: "#/components/responses/401Unauthorized"
        404:
          $ref: "#/components/responses/404NotFound"
        410:
          $ref: "#/components/responses/410Gone"
        500:
          $ref: "#/components/responses/500InternalServerError"

components:
  securitySchemes:
    bearerByJWT:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: /tokenにて生成したJWT

  parameters:
    paramApiVersion:
      name: my-judgment-api-version
      in: header
      description: MyJudgmentAPIバージョン
      required: true
      schema:
        type: string
        example: "1.0"

    paramMjCategoryID:
      name: categoryID
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
        exclusiveMaximum: true
        example: 1

    paramMjItemID:
      name: itemID
      in: path
      required: true
      schema:
        type: integer
        minimum: 1
        exclusiveMaximum: true
        example: 1

    paramMjItemIDs:
      name: item-ids
      in: query
      description: アイテムID<br>複数ID指定可能(exp. ?ids=1,2,3)
      required: true
      schema:
        type: integer
        minimum: 1
        exclusiveMaximum: true
        example: 1,2,3

    paramMjLockID:
      name: lock-id
      in: query
      required: true
      schema:
        type: integer
        minimum: 1
        exclusiveMaximum: true
        example: 1

    paramLimit:
      name: limit
      in: query
      required: true
      schema:
        type: integer
        maximum: 50
        example: 50

    paramOffset:
      name: offset
      in: query
      required: true
      schema:
        type: integer
        minimum: 0
        example: 0

    paramName:
      in: query
      description: アイテム名を指定する場合は付与
      name: name
      required: false
      schema:
        type: string
        example: アイテム1

    paramArea:
      in: query
      description: エリアを指定する場合は付与
      name: area
      required: false
      schema:
        type: string
        example: '00001'

    paramFeel:
      in: query
      description: 気分を指定する場合は付与
      name: feel
      required: false
      schema:
        type: string
        example: '01001'

    paramNumberOfPeople:
      in: query
      description: 人数を指定する場合は付与
      name: number-of-people
      required: false
      schema:
        type: string
        example: '00301'

    paramGenderOfPair:
      in: query
      description: 性別ペアを指定する場合は付与
      name: gender-of-pair
      required: false
      schema:
        type: string
        example: '00401'

  requestBodies:
    postMjItemReq:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              mjItem:
                allOf:
                  - $ref: "#/components/schemas/mjItemName"
                  - $ref: "#/components/schemas/mjItemArea"
                  - $ref: "#/components/schemas/mjItemFeel"
                  - $ref: "#/components/schemas/mjItemNumberOfPeople"
                  - $ref: "#/components/schemas/mjItemGenderOfPair"

    putMjItemReq:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              mjItem:
                allOf:
                  - $ref: "#/components/schemas/mjItemName"
                  - $ref: "#/components/schemas/mjItemArea"
                  - $ref: "#/components/schemas/mjItemFeel"
                  - $ref: "#/components/schemas/mjItemNumberOfPeople"
                  - $ref: "#/components/schemas/mjItemGenderOfPair"

  responses:
    postMjItemResp:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              mjItem:
                allOf:
                  - $ref: "#/components/schemas/mjItemID"

    getMjItemsResp:
      description: OK
      content:
        application/json:
          schema:
            allOf:
              - $ref: "#/components/schemas/totalCount"
              - $ref: "#/components/schemas/prevOffset"
              - $ref: "#/components/schemas/nextOffset"
              - type: object
                properties:
                  mjItems:
                    type: array
                    items:
                      allOf:
                        - $ref: "#/components/schemas/mjItemID"
                        - $ref: "#/components/schemas/mjItemName"
                    example:
                      - id: 2
                        name: アイテム2
                      - id: 1
                        name: アイテム1

    putMjItemResp:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              mjItem:
                allOf:
                  - $ref: "#/components/schemas/mjItemID"

    getMjItemResp:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              mjItem:
                allOf:
                  - $ref: "#/components/schemas/mjItemID"
                  - $ref: "#/components/schemas/mjItemName"
                  - $ref: "#/components/schemas/mjItemArea"
                  - $ref: "#/components/schemas/mjItemFeel"
                  - $ref: "#/components/schemas/mjItemNumberOfPeople"
                  - $ref: "#/components/schemas/mjItemGenderOfPair"
                  - $ref: "#/components/schemas/mjItemUseCount"

    getMjFavoriteItemsResp:
      description: OK
      content:
        application/json:
          schema:
            type: object
            properties:
              mjFavoriteItems:
                type: array
                items:
                  allOf:
                    - $ref: "#/components/schemas/mjItemID"
                    - $ref: "#/components/schemas/mjItemName"
                example:
                  - id: 2
                    name: アイテム2
                  - id: 1
                    name: アイテム1


    # エラーレスポンス
    400BadRequest:
      description: BadRequest<br>全てのエラーコードパターンはExamplesを参照
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/baseError'
          examples:
            InvalidParameter:
              $ref: '#/components/examples/error400InvalidParameter'

    400BadRequest2:
      description: BadRequest<br>全てのエラーコードパターンはExamplesを参照
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/baseError'
          examples:
            InvalidParameter:
              $ref: '#/components/examples/error400InvalidParameter'
            RegistrationLimitExceeded:
              $ref: '#/components/examples/error400RegistrationLimitExceeded'

    401Unauthorized:
      description: Unauthorized<br>全てのエラーコードパターンはExamplesを参照
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/baseError'
          examples:
            TokenRequired:
              $ref: '#/components/examples/error401TokenRequired'
            InvalidToken:
              $ref: '#/components/examples/error401InvalidToken'

    404NotFound:
      description: NotFound<br>全てのエラーコードパターンはExamplesを参照
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/baseError'
          examples:
            MjItemNotFound:
              $ref: '#/components/examples/error404MjItemNotFound'

    404NotFound2:
      description: NotFound<br>全てのエラーコードパターンはExamplesを参照
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/baseError'
          examples:
            MjCategoryNotFound:
              $ref: '#/components/examples/error404MjCategoryNotFound'

    404NotFound3:
      description: NotFound<br>全てのエラーコードパターンはExamplesを参照
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/baseError'
          examples:
            MjCategoryNotFound:
              $ref: '#/components/examples/error404MjCategoryNotFound'
            MjItemNotFound:
              $ref: '#/components/examples/error404MjItemNotFound'
            MjLockNotFound:
              $ref: '#/components/examples/error404MjLockNotFound'

    404NotFound4:
      description: NotFound<br>全てのエラーコードパターンはExamplesを参照
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/baseError'
          examples:
            MjCategoryNotFound:
              $ref: '#/components/examples/error404MjCategoryNotFound'
            MjItemNotFound:
              $ref: '#/components/examples/error404MjItemNotFound'

    409Conflict:
      description: Conflict<br>全てのエラーコードパターンはExamplesを参照
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/baseError'
          examples:
            MjItemNameConflict:
              $ref: '#/components/examples/error409MjItemNameConflict'

    410Gone:
      description: Gone<br>全てのエラーコードパターンはExamplesを参照
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/baseError'
          examples:
            Gone:
              $ref: '#/components/examples/error410Gone'

    500InternalServerError:
      description: InternalServerError<br>全てのエラーコードパターンはExamplesを参照
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/baseError'
          examples:
            InternalServerError:
              $ref: '#/components/examples/error500InternalServerError'


  schemas:
    # errorレスポンスボディschema
    baseError:
      description: エラーレスポンス
      type: object
      properties:
        error:
          type: object
          properties:
            code:
              type: string
            detail:
              type: object
              nullable: true

    # フィールドschema
    totalCount:
      type: object
      properties:
        totalCount:
          type: integer
          example: 2

    prevOffset:
      type: object
      properties:
        prevOffset:
          description: 前のページない場合はnull
          type: integer
          nullable: true
          example: null

    nextOffset:
      type: object
      properties:
        nextOffset:
          description: 次のページない場合はnull
          type: integer
          nullable: true
          example: null

    mjItemID:
      type: object
      properties:
        id:
          description: アイテムID
          type: integer
          minimum: 1
          exclusiveMaximum: true
          example: 1

    mjItemName:
      type: object
      properties:
        name:
          description: アイテム名
          type: string
          minLength: 1
          maxLength: 20
          example: アイテム1

    mjItemArea:
      type: object
      properties:
        area:
          description: アイテム地域
          type: string
          nullable: true
          minLength: 5
          maxLength: 5
          example: '00001'

    mjItemFeel:
      type: object
      properties:
        feel:
          description: 気分
          type: string
          nullable: true
          minLength: 5
          maxLength: 5
          example: '01001'

    mjItemNumberOfPeople:
      type: object
      properties:
        numberOfPeople:
          description: 人数
          type: string
          nullable: true
          minLength: 5
          maxLength: 5
          example: '00301'

    mjItemGenderOfPair:
      type: object
      properties:
        genderOfPair:
          description: 性別ペア
          type: string
          nullable: true
          minLength: 5
          maxLength: 5
          example: '00401'

    mjItemUseCount:
      type: object
      properties:
        useCount:
          description: アイテム使用回数
          type: integer
          example: 1

  examples:
    error400InvalidParameter:
      description: 無効なパラメータ
      value:
        error:
          code: InvalidParameter
          detail: null

    error400RegistrationLimitExceeded:
      description: 登録上限数超過<br>・無料プラン:アイテム登録上限1カテゴリーに対して10<br>・有料プラン:アイテム登録上限無し
      value:
        error:
          code: RegistrationLimitExceeded
          detail: null

    error401TokenRequired:
      description: 認証トークンが必要
      value:
        error:
          code: TokenRequired
          detail: null

    error401InvalidToken:
      description: 認証トークンが無効
      value:
        error:
          code: InvalidToken
          detail: null

    error404MjCategoryNotFound:
      description: 指定されたアイテムが存在しない
      value:
        error:
          code: MjCategoryNotFound
          detail: null

    error404MjItemNotFound:
      description: 指定されたアイテムが存在しない
      value:
        error:
          code: MjItemNotFound
          detail: null

    error404MjLockNotFound:
      description: 指定されたロックが存在しない
      value:
        error:
          code: MjLockNotFound
          detail: null

    error409MjItemNameConflict:
      description: アイテム名重複
      value:
        error:
          code: MjItemNameConflict
          detail: null

    error410Gone:
      description: ヘッダーで指定されたAPIバージョンがサポート外の場合
      value:
        error:
          code: Gone
          detail: null

    error500InternalServerError:
      description: サーバー側での予期しないエラー
      value:
        error:
          code: InternalServerError
          detail: null
