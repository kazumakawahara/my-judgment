// Code generated by MockGen. DO NOT EDIT.
// Source: fetch_user_usecase.go

// Package mockuserusecase is a generated GoMock package.
package mockuserusecase

import (
	context "context"
	userinput "my-judgment/usecase/userusecase/userinput"
	useroutput "my-judgment/usecase/userusecase/useroutput"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFetchUserUsecase is a mock of FetchUserUsecase interface.
type MockFetchUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockFetchUserUsecaseMockRecorder
}

// MockFetchUserUsecaseMockRecorder is the mock recorder for MockFetchUserUsecase.
type MockFetchUserUsecaseMockRecorder struct {
	mock *MockFetchUserUsecase
}

// NewMockFetchUserUsecase creates a new mock instance.
func NewMockFetchUserUsecase(ctrl *gomock.Controller) *MockFetchUserUsecase {
	mock := &MockFetchUserUsecase{ctrl: ctrl}
	mock.recorder = &MockFetchUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFetchUserUsecase) EXPECT() *MockFetchUserUsecaseMockRecorder {
	return m.recorder
}

// FetchUser mocks base method.
func (m *MockFetchUserUsecase) FetchUser(ctx context.Context, in *userinput.FetchUserInput) (*useroutput.FetchUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUser", ctx, in)
	ret0, _ := ret[0].(*useroutput.FetchUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUser indicates an expected call of FetchUser.
func (mr *MockFetchUserUsecaseMockRecorder) FetchUser(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUser", reflect.TypeOf((*MockFetchUserUsecase)(nil).FetchUser), ctx, in)
}
