// Code generated by MockGen. DO NOT EDIT.
// Source: update_user_usecase.go

// Package mockuserusecase is a generated GoMock package.
package mockuserusecase

import (
	context "context"
	userinput "my-judgment/usecase/userusecase/userinput"
	useroutput "my-judgment/usecase/userusecase/useroutput"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockUpdateUserUsecase is a mock of UpdateUserUsecase interface.
type MockUpdateUserUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockUpdateUserUsecaseMockRecorder
}

// MockUpdateUserUsecaseMockRecorder is the mock recorder for MockUpdateUserUsecase.
type MockUpdateUserUsecaseMockRecorder struct {
	mock *MockUpdateUserUsecase
}

// NewMockUpdateUserUsecase creates a new mock instance.
func NewMockUpdateUserUsecase(ctrl *gomock.Controller) *MockUpdateUserUsecase {
	mock := &MockUpdateUserUsecase{ctrl: ctrl}
	mock.recorder = &MockUpdateUserUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUpdateUserUsecase) EXPECT() *MockUpdateUserUsecaseMockRecorder {
	return m.recorder
}

// UpdateUser mocks base method.
func (m *MockUpdateUserUsecase) UpdateUser(ctx context.Context, in *userinput.UpdateUserInput) (*useroutput.UpdateUserOutput, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", ctx, in)
	ret0, _ := ret[0].(*useroutput.UpdateUserOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockUpdateUserUsecaseMockRecorder) UpdateUser(ctx, in interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockUpdateUserUsecase)(nil).UpdateUser), ctx, in)
}
