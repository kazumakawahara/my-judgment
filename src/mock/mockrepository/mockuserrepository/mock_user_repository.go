// Code generated by MockGen. DO NOT EDIT.
// Source: repository.go

// Package mockuserrepository is a generated GoMock package.
package mockuserrepository

import (
	context "context"
	uservo "my-judgment/common/vo/uservo"
	userdm "my-judgment/domain/userdm"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockRepository) CreateUser(ctx context.Context, userEntity *userdm.User) (uservo.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", ctx, userEntity)
	ret0, _ := ret[0].(uservo.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockRepositoryMockRecorder) CreateUser(ctx, userEntity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockRepository)(nil).CreateUser), ctx, userEntity)
}

// ExistsUserByPassword mocks base method.
func (m *MockRepository) ExistsUserByPassword(ctx context.Context, passwordVO uservo.Password) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ExistsUserByPassword", ctx, passwordVO)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ExistsUserByPassword indicates an expected call of ExistsUserByPassword.
func (mr *MockRepositoryMockRecorder) ExistsUserByPassword(ctx, passwordVO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ExistsUserByPassword", reflect.TypeOf((*MockRepository)(nil).ExistsUserByPassword), ctx, passwordVO)
}

// FetchUserByID mocks base method.
func (m *MockRepository) FetchUserByID(ctx context.Context, userIDVO uservo.ID) (*userdm.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserByID", ctx, userIDVO)
	ret0, _ := ret[0].(*userdm.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserByID indicates an expected call of FetchUserByID.
func (mr *MockRepositoryMockRecorder) FetchUserByID(ctx, userIDVO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserByID", reflect.TypeOf((*MockRepository)(nil).FetchUserByID), ctx, userIDVO)
}

// FetchUserIDByEmail mocks base method.
func (m *MockRepository) FetchUserIDByEmail(ctx context.Context, emailVO uservo.Email) (uservo.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserIDByEmail", ctx, emailVO)
	ret0, _ := ret[0].(uservo.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserIDByEmail indicates an expected call of FetchUserIDByEmail.
func (mr *MockRepositoryMockRecorder) FetchUserIDByEmail(ctx, emailVO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserIDByEmail", reflect.TypeOf((*MockRepository)(nil).FetchUserIDByEmail), ctx, emailVO)
}

// FetchUserIDByName mocks base method.
func (m *MockRepository) FetchUserIDByName(ctx context.Context, nameVO uservo.Name) (uservo.ID, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchUserIDByName", ctx, nameVO)
	ret0, _ := ret[0].(uservo.ID)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FetchUserIDByName indicates an expected call of FetchUserIDByName.
func (mr *MockRepositoryMockRecorder) FetchUserIDByName(ctx, nameVO interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchUserIDByName", reflect.TypeOf((*MockRepository)(nil).FetchUserIDByName), ctx, nameVO)
}
